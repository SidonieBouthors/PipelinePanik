[gd_scene load_steps=5 format=3 uid="uid://cxj0vcodmmf5w"]

[ext_resource type="Script" path="res://introduction_2.gd" id="1_kb3q1"]
[ext_resource type="Theme" uid="uid://dwctb0tlytcoo" path="res://pipeline_theme.tres" id="1_mewcv"]
[ext_resource type="PackedScene" path="res://background_tiled.tscn" id="2_l32m7"]
[ext_resource type="FontFile" uid="uid://dnsh0g58gjw40" path="res://assets/fonts/m5x7.ttf" id="2_tj6w6"]

[node name="introduction_2" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_kb3q1")

[node name="Background" parent="." instance=ExtResource("2_l32m7")]

[node name="RichTextLabel" type="RichTextLabel" parent="."]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -235.0
offset_top = 5.0
offset_right = 237.0
offset_bottom = 239.0
grow_horizontal = 2
theme = ExtResource("1_mewcv")
theme_override_fonts/normal_font = ExtResource("2_tj6w6")
text = "Une instruction est l'élément élémentaire de l'exécution d'un programme informatique. L'opération peut être de plusieurs types :
ALU : une opération mathématique simple (addition, soustraction)
MEM : une lecture ou écriture de la mémoire

Elle se présente sous la forme suivante :
Opération à exécuter ; résultat ; 1er paramètre ; 2ème paramètre.
Un exemple d'instruction est : ALU r3 r1 r2, qui est équivalent à r3 = r1 ± r2.

Les instructions sont données dans un certain ordre, et certaines sont dépendantes de cet ordre d'exécution pour obtenir le bon résultat. Voici un exemple simple : 
	Instruction 0 : MEM r1, 0, 0 <=> r1 = mem[0]
	Instruction 1 : ALU  r3, r1, 1	<=> r3 = r1 + 1
On voit ici que si l'instruction 1 est lancée avant que l'instruction 0 ne soit finie, on n'obtiendra pas le bon résultat.

Chaque étape est symbolisée par sa première lettre : F, D, A, M, et W :
- Fetch : Récupère la prochaine instruction de la mémoire
- Decode : Prépare les registres et détermine, en fonction de leurs dépendances, si l'instruction peut continuer dans la pipeline
- ALU : Effectue les opérations arithmétiques
- Memory : Effectue les opérations qui sollicitent la mémoire
- Writeback : Marque l’instruction comme étant terminée et enregistre le résultat dans le registre correspondant

Un concept important est la notion de temps, dans un processeur chaque étape est régie par un tempo bien précis, le Clock Cycle (abrégé cc). Toutes les étapes prennent exactement 1cc. Ainsi, comme les étapes sont en série, si une étape est bloquée, elle bloquera toutes les étapes en amont : on dit que la pipeline \"stall\".
On peut désormais exécuter les instructions en parallèle (sur plusieurs étages visuellement) pour accélérer les performances. Cependant, une contrainte demeure : les instructions doivent toujours être validées dans un ordre croissant. Pour garantir le respect de cet ordre, on utilise un Reorder Buffer (ROB), qui s'assure de réorganiser les instructions de manière appropriée.
Comme mentionné précédemment, le but est d'optimiser le temps total d'exécution d'une série d'instructions. Ce temps se compte en Instruction Par Cycle (abrégé IPC), c'est le rapport entre le nombre d'instructions validées et le nombre de cc. Ainsi plus l'IPC est grand, meilleure sera la performance. 

Te voilà prêt⋅e à construire ta première pipeline. Bonne chance !






"

[node name="HBoxContainer" type="HBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -147.0
offset_top = -30.0
offset_right = -27.0
offset_bottom = -5.0
grow_horizontal = 0
grow_vertical = 0
theme_override_constants/separation = 20

[node name="Begin" type="Button" parent="HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 4
theme_override_fonts/font = ExtResource("2_tj6w6")
theme_override_font_sizes/font_size = 16
text = "Commencer à jouer
"

[connection signal="pressed" from="HBoxContainer/Begin" to="." method="_on_begin_pressed"]
